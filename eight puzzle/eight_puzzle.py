# -*- coding: utf-8 -*-
"""CSCI_5511_HW.ipynb

Automatically generated by Colaboratory.

# **State Representation**
"""

def visualize(input):
  for i in range(0, len(input), 3):
    print("|", end="")
    for j in range(i, i + 3):
      print(f" {input[j]} |", end="")
    print()

"""# **Setup**

## **Node Setup**
"""

from pickle import NONE
import time
import heapq
from collections import deque
import sys

class Node:

    def __init__(self, state, parent=None, action=None, path_cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
        self.depth = 0
        if parent:
            self.depth = parent.depth + 1

    def __repr__(self):
        return "<Node {}>".format(self.state)

    def __lt__(self, node):
        return self.state < node.state

    def expand(self, problem):
        return [self.child_node(problem, action)
                for action in problem.actions(self.state)]

    def child_node(self, problem, action):
        next_state = problem.result(self.state, action)
        next_node = Node(next_state, self, action,
                    problem.path_cost(self.path_cost, self.state,
                                      action, next_state))
        return next_node

    def solution(self):
        return [node.action for node in self.path()[1:]]

    def path(self):
        node, path_back = self, []
        while node:
            path_back.append(node)
            node = node.parent
        return list(reversed(path_back))

    def __eq__(self, other):
        return isinstance(other, Node) and self.state == other.state

    def __hash__(self):
        return hash(self.state)

"""## **Problem Setup**"""

class Problem(object):
  def __init__(self, initial):
        self.initial = initial
        self.goal = (1, 2, 3, 8, 0, 4, 7, 6, 5)

  def find_blank_square(self, state):
        return state.index(0)

  def actions(self, state):
        possible_actions = ['U', 'D', 'L', 'R']
        index_blank_square = self.find_blank_square(state)

        if index_blank_square % 3 == 0:
            possible_actions.remove('R')
        if index_blank_square < 3:
            possible_actions.remove('D')
        if index_blank_square % 3 == 2:
            possible_actions.remove('L')
        if index_blank_square > 5:
            possible_actions.remove('U')

        return possible_actions

  def result(self, state, action):
        blank = self.find_blank_square(state)
        new_state = list(state)
        delta = {'D': -3, 'U': 3, 'R': -1, 'L': 1}
        neighbor = blank + delta[action]
        new_state[blank], new_state[neighbor] = new_state[neighbor], new_state[blank]
        return tuple(new_state)

  def is_goal(self, state):
        return state == self.goal

  def path_cost(self, c, state1, action, state2):
        return c + 1

  def num_wrong_tiles(self, node):
    state = node.state
    goal = self.goal
    count = 0
    for i in range(0, len(goal)):
        if state[i] == 0:
            continue
        if (state[i] != goal[i]):
            count += 1
    return count

  def find_position(self, lst, value):
    index = lst.index(value)
    return index // 3, index % 3

  def manhattan_distance(self, node):
    distance = 0
    for value in node.state:
        if value != 0:
            i_initial, j_initial = self.find_position(node.state, value)
            i_goal, j_goal = self.find_position(self.goal, value)
            distance += abs(i_initial - i_goal) + abs(j_initial - j_goal)

    return distance

"""## **Priority Queue Setup**"""

class PriorityQueue:

    def __init__(self, order='min', f=lambda x: x):
        self.heap = []
        if order == 'min':
            self.f = f

    def append(self, item):
        """Insert item at its correct position."""
        heapq.heappush(self.heap, (self.f(item), item))

    def extend(self, items):
        """Insert each item in items at its correct position."""
        for item in items:
            self.append(item)

    def pop(self):
        """Pop and return the item (with min or max f(x) value)
        depending on the order."""
        if self.heap:
            return heapq.heappop(self.heap)[1]
        else:
            raise Exception('Trying to pop from empty PriorityQueue.')

    def __len__(self):
        """Return current capacity of PriorityQueue."""
        return len(self.heap)

    def __contains__(self, key):
        """Return True if the key is in PriorityQueue."""
        return any([item == key for _, item in self.heap])

    def __getitem__(self, key):
        """Returns the first value associated with key in PriorityQueue.
        Raises KeyError if key is not present."""
        for value, item in self.heap:
            if item == key:
                return value
        raise KeyError(str(key) + " is not in the priority queue")

    def __delitem__(self, key):
        """Delete the first occurrence of key."""
        try:
            del self.heap[[item == key for _, item in self.heap].index(True)]
        except ValueError:
            raise KeyError(str(key) + " is not in the priority queue")
        heapq.heapify(self.heap)

"""## **Uninformed Strategies**

## **Breadth-First Search**
"""

def breadth_first(problem):
    node = Node(problem.initial)
    if problem.is_goal(node.state):
        return node
    frontier = deque([node])
    reached = set()
    while frontier:
        node = frontier.popleft()
        reached.add(node.state)
        for child in node.expand(problem):
            if child.state not in reached and child not in frontier:
                if problem.is_goal(child.state):
                    return child
                frontier.append(child)
    return None

"""## **Depth-Limited Search**"""
def depth_limited_search(problem, limit):
    stack = [(Node(problem.initial), limit)]
    while stack:
        node, remaining_limit = stack.pop()
        if problem.is_goal(node.state):
            return node
        if remaining_limit > 0:
            children = node.expand(problem)
            cutoff_occurred = False
            for child in children:
                stack.append((child, remaining_limit - 1))
    return 'cutoff'

"""## **Iterative-Deepening**"""
def iterative_deepening(problem):
    for depth in range(sys.maxsize):
        result = depth_limited_search(problem, depth)
        if result != 'cutoff':
            return result

"""## **A star**"""

def astar(problem, h = None):
    if h == 'manhattan_distance':
      h = problem.manhattan_distance
    elif h == 'num_wrong_tiles':
      h = problem.num_wrong_tiles
      
    f = lambda n: n.path_cost + h(n)
    node = Node(problem.initial)
    frontier = PriorityQueue('min', f)
    frontier.append(node)
    explored = set()
    
    while frontier:
        node = frontier.pop()
        if problem.is_goal(node.state):
          return node
        explored.add(node.state)
        for child in node.expand(problem):
            if child.state not in explored and child not in frontier:
                frontier.append(child)
            elif child in frontier:
                if f(child) < frontier[child]:
                    del frontier[child]
                    frontier.append(child)
    return None

"""## **main()**"""
def main():

    # Input from Command Terminal
    initial = sys.argv[1]
    initial_state = tuple(map(int,initial))

    # Create the problem
    problem = Problem(initial_state)

    # Visualise
    visualize(problem.initial)
    print()
    
    # Solve the problem using breadth-first search
    start = time.time()
    solution_bfs = breadth_first(problem)
    if solution_bfs is not None:
        print(solution_bfs.solution())
    else:
        print("No solution found.")
    print(f"BFS took {(time.time()-start):.15f}")

    # Solve the problem using iterative-deepening search
    start = time.time()
    solution_ids = iterative_deepening(problem)
    if solution_ids is not None:

        print(solution_ids.solution())
    else:
        print("No solution found.")
    print(f"IDDFS took {(time.time()-start):.15f}")

    # Solve the problem using astar - num wrong tiles search
    start = time.time()
    solution_astar_nwt = astar(problem, 'num_wrong_tiles')
    if solution_astar_nwt is not None:
        print(solution_astar_nwt.solution())
    else:
        print("No solution found.")
    print(f"A* using num_wrong_tiles took {(time.time()-start):.15f}")

    # Solve the problem using astar - manhattan distance search
    start = time.time()
    solution_astar_md = astar(problem, 'manhattan_distance')
    if solution_astar_md is not None:
        
        print(solution_astar_md.solution())
    else:
        print("No solution found.")
    print(f"A* using manhattan_distance took {(time.time()-start):.15f}")

if __name__ == "__main__":
  main()
